CREATE DATABASE ALTA_ONLINE_SHOP;
USE ALTA_ONLINE_SHOP;

CREATE TABLE PRODUCT_TYPES (
  ID INT(11),
  NAME VARCHAR(255) ,
  CREATED_AT DATETIME ,
  UPDATED_AT DATETIME ,
  PRIMARY KEY (ID)
);

CREATE TABLE OPERATORS (
  ID INT(11) ,
  NAME VARCHAR(255) ,
  CREATED_AT DATETIME ,
  UPDATED_AT DATETIME,
  PRIMARY KEY (ID)
);

CREATE TABLE PRODUCTS (
  ID INT(11) ,
  PRODUCT_TYPE_ID INT(11) ,
  OPERATOR_ID INT(11) ,
  CODE VARCHAR(50),
  NAME VARCHAR(100),
  STATUS SMALLINT,
  CREATED_AT DATETIME ,
  UPDATED_AT DATETIME,
  PRIMARY KEY (ID),
  FOREIGN KEY (PRODUCT_TYPE_ID) 
    REFERENCES PRODUCT_TYPES(ID) 
      ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY (OPERATOR_ID) 
    REFERENCES OPERATORS(ID) 
      ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE PRODUCT_DESCRIPTIONS (
  ID INT(11)  ,
  DESCRIPTION TEXT,
  CREATED_AT DATETIME ,
  UPDATED_AT DATETIME,
  PRIMARY KEY (ID),
  FOREIGN KEY (ID) 
    REFERENCES PRODUCTS(ID) 
      ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE PAYMENT_METHODS (
  ID INT(11) ,
  NAME VARCHAR(255) ,
  STATUS SMALLINT,
  CREATED_AT DATETIME ,
  UPDATED_AT DATETIME,
  PRIMARY KEY (ID) 
);

CREATE TABLE USERS (
  ID INT(11)  ,
  NAME VARCHAR(255),
  STATUS SMALLINT,
  DOB DATE,
  GENDER CHAR(1),
  CREATED_AT DATETIME ,
  UPDATED_AT DATETIME,
  PRIMARY KEY (ID)
);

CREATE TABLE TRANSACTIONS (
  ID INT(11) ,
  USER_ID INT(11) ,
  PAYMENT_METHOD_ID INT(11) ,
  STATUS VARCHAR(10),
  TOTAL_QTY INT(11),
  TOTAL_PRICE NUMERIC(25, 2),
  CREATED_AT DATETIME ,
  UPDATED_AT DATETIME,
  PRIMARY KEY (ID),
  FOREIGN KEY (USER_ID)
    REFERENCES USERS(ID) 
      ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY (PAYMENT_METHOD_ID)
    REFERENCES PAYMENT_METHODS(ID) 
      ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE TRANSACTION_DETAILS (
  TRANSACTION_ID INT(11)  ,
  PRODUCT_ID INT(11)  ,
  STATUS VARCHAR(10),
  QTY INT(11),
  PRICE NUMERIC(25,2),
  CREATED_AT DATETIME ,
  UPDATED_AT DATETIME,
  PRIMARY KEY (TRANSACTION_ID, PRODUCT_ID)
);

-- CREATE FOREIGN KEY
-- ALTER TABLE PRODUCTS ADD FOREIGN KEY (PRODUCT_TYPE_ID) REFERENCES PRODUCT_TYPES(ID) ON UPDATE CASCADE ON DELETE CASCADE;
-- ALTER TABLE PRODUCTS ADD FOREIGN KEY (OPERATOR_ID) REFERENCES OPERATORS(ID) ON UPDATE CASCADE ON DELETE CASCADE;
-- ALTER TABLE TRANSACTIONS ADD FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON UPDATE CASCADE ON DELETE CASCADE;
-- ALTER TABLE TRANSACTIONS ADD FOREIGN KEY (PAYMENT_METHOD_ID) REFERENCES PAYMENT_METHODS(ID) ON UPDATE CASCADE ON DELETE CASCADE;

-- POINT PRODUCT_DECRIPTIONS PRIMARY KEY TO PRODUCTS PRIMARY KEY TO MAKE RELATION OF BOTH TABLES ARE UNIQUE OR 1 TO 1 SO THEY WONT HAVE DUPLICATE.
-- ALTER TABLE PRODUCT_DESCRIPTIONS ADD FOREIGN KEY (ID) REFERENCES PRODUCTS(ID) ON UPDATE CASCADE ON DELETE CASCADE;









-- PROBLEM

-- 1-A INSERT 5 OPERATORS PADA TABLE OPERATORS

INSERT INTO OPERATORS 
VALUE 
(1, "ROBOT_OFFICIAL", NOW(),NOW()),
(2, "KZ_OFFICIAL",NOW(),NOW()),
(3, "ICHITAN_OFFICIAL",NOW(),NOW()),
(4, "ALFAMART_OFFICIAL_MALL",NOW(),NOW()),
(5, "FANTECH_OFFICIAL_STORE",NOW(),NOW());

-- 1-B INSERT 3 PRODUCT TYPE
INSERT INTO PRODUCT_TYPES
VALUE
(1, "Elektronik", NOW(), NOW()),
(2, "Minuman", NOW(), NOW()),
(3, "Kesehatan", NOW(), NOW());

-- 1-C INSERT 2 PRODUCT DENGAN PRODUCT TYPE ID = 1, dan Operators id = 3.
INSERT INTO PRODUCTS 
VALUES
(1, 1, 3, "OCHA_GreenTea", "Ocha Greentea Variant", 1, NOW(), NOW()), -- 10.000
(2, 1, 3, "OCHA_Original","Ocha Original Variant", 1, NOW(), NOW()); -- 10.000

-- 1-D INSERT 3 PRODUCT DENGAN PRODUCT TYPE ID = 2, dan Operators id = 1
INSERT INTO PRODUCTS 
VALUES
(3, 2, 1, "PB_A_10000MAH", "Power Bank 10000 mAh", 1, NOW(), NOW()), -- 100.000
(4, 2, 1, "CHARGER_C_5V2A","USB C Charger 5V 2A", 1, NOW(), NOW()), -- 50.000
(5, 2, 1, "CABLE_C_2A","USB C Cable Max 2A ", 1, NOW(), NOW()); -- 10.000

-- 1-E INSERT 3 PRODUCT DENGAN PRODUCT TYPE ID = 3, dan Operators id = 4
INSERT INTO PRODUCTS 
VALUES
(6, 3, 4, "D_BB_200ml", "Bear Brand 200ml", 1, NOW(), NOW()), -- 11.000
(7, 3, 4, "IC_CTO_DoubleChoco","Cornetto Double Choco", 1, NOW(), NOW()), -- 11.000
(8, 3, 4, "S_CTT_Original","Chittatos Original Flavour", 1, NOW(), NOW()); -- 12.000

-- 1-F INSERT PRODUCT DESCRIPTION PADA SETIAP PRODUCT
INSERT INTO PRODUCT_DESCRIPTIONS 
VALUES
(1, "Ocha Green Tea adalah produk minuman teh dengan pengolahan yang modern dan bahan yang digunakan adalah teh hijau yang alami dipetik langsung dari pohonnya di Lembang-Bandung", NOW(), NOW()),
(2, "Ocha Original Tea adalah produk minuman teh asli indonesia yang diproses secara modern sehingga menghasilkan rasa teh asli", NOW(), NOW()),
(3, "Power Bank ini awet dengan garansi 5 Tahun dan kapasitas asli 10000 mAh", NOW(), NOW()),
(4, "Chager ini bisa mengisi hp anda dalam waktu kurang dari 24 jam!", NOW(), NOW()),
(5, "Cable ini bisa digunakan oleh semua hp android yang menggunakan port type C", NOW(), NOW()),
(6, "Susu sapi asli dengan pemurnian UHT", NOW(), NOW()),
(7, "Ice Cream Cone dengan porsi coklat double!", NOW(), NOW()),
(8, "Snack Kentang siap santap untuk kamu yang gabisa berhenti makan", NOW(), NOW());

-- 1-G Insert 3 Payment Method

INSERT INTO PAYMENT_METHODS
VALUE
(1, "DANA", 1, NOW(), NOW()),
(2, "LinkAja", 1, NOW(), NOW()),
(3, "BNI Mobile Banking", 1, NOW(), NOW());

-- 1-H Insert 5 User pada tabel USERS

INSERT INTO USERS
VALUE
(1, "Abdul", 1, "2000-01-01", "L", NOW(), NOW()),
(2, "Haikal", 1, "2001-01-01", "L", NOW(), NOW()),
(3, "Zayn", 1, "2002-01-01", "P", NOW(), NOW()),
(4, "Riki", 1, "2003-01-01", "L", NOW(), NOW()),
(5, "Bella", 1, "2004-01-01", "P", NOW(), NOW());

-- 1-I INSERT 3 TRANSAKSI PADA MASING-MASING USER
INSERT INTO TRANSACTIONS
VALUE
-- USER 1
(1, 1, 1, "PAID", 10, 100000.00, NOW(), NOW()),
(2, 1, 1, "PAID", 6, 155000.00, NOW(), NOW()),
(3, 1, 3, "PAID", 6, 68000.00, NOW(), NOW()),
-- USER 2
(4, 2, 2, "PAID", 6, 187000.00, NOW(), NOW()),
(5, 2, 2, "PAID", 6, 62000.00, NOW(), NOW()),
(6, 2, 3, "PAYLATER", 8, 92000.00, NOW(), NOW()),
-- USER 3
(7, 3, 3, "PAYLATER", 103, 1030000.00, NOW(), NOW()),
(8, 3, 3, "PAYLATER", 7, 167000.00, NOW(), NOW()),
(9, 3, 3, "PAYLATER", 6, 140000.00, NOW(), NOW()),
-- USER 4
(10, 4, 1, "PAID", 6, 156000.00, NOW(), NOW()),
(11, 4, 1, "PAID", 6, 180000.00, NOW(), NOW()),
(12, 4, 1, "PAID", 6, 67000.00, NOW(), NOW()),
-- USER 5
(13, 5, 1, "PAID", 30, 330000.00, NOW(), NOW()),
(14, 5, 1, "PAID", 6, 61000.00, NOW(), NOW()),
(15, 5, 1, "PAID", 6, 270000.00, NOW(), NOW());

-- 1-J PRODUCT DI MASING-MASING TRANSAKSI
INSERT INTO TRANSACTION_DETAILS
VALUE

-- USER 1
-- USER 1 TRANSACTION 1
(1, 1, "PAID", 6, 10000.00, NOW(), NOW()),
(1, 2, "PAID", 1, 10000.00, NOW(), NOW()),
(1, 5, "PAID", 3, 10000.00, NOW(), NOW()),
-- USER 1 TRANSACTION 2
(2, 3, "PAID", 1, 100000.00, NOW(), NOW()),
(2, 6, "PAID", 2, 11000.00, NOW(), NOW()),
(2, 7, "PAID", 3, 11000.00, NOW(), NOW()),
-- USER 1 TRANSACTION 3
(3, 8, "PAID", 3, 12000.00, NOW(), NOW()),
(3, 6, "PAID", 2, 11000.00, NOW(), NOW()),
(3, 2, "PAID", 1, 10000.00, NOW(), NOW()),

-- USER 2
-- TRANSACTION 1
(4, 4, "PAID", 3, 50000.00, NOW(), NOW()),
(4, 6, "PAID", 2, 11000.00, NOW(), NOW()),
(4, 2, "PAID", 1, 10000.00, NOW(), NOW()),
-- TRANSACTION 2
(5, 1, "PAID", 3, 10000.00, NOW(), NOW()),
(5, 6, "PAID", 2, 11000.00, NOW(), NOW()),
(5, 2, "PAID", 1, 10000.00, NOW(), NOW()),
-- TRANSACTION 3
(6, 8, "PAYLATER", 5, 12000.00, NOW(), NOW()),
(6, 6, "PAYLATER", 2, 11000.00, NOW(), NOW()),
(6, 2, "PAYLATER", 1, 10000.00, NOW(), NOW()),

-- USER 3
-- TRANSACTION 1
(7, 5, "PAID", 100, 10000.00, NOW(), NOW()),
(7, 2, "PAID", 2, 10000.00, NOW(), NOW()),
(7, 1, "PAID", 1, 10000.00, NOW(), NOW()),
-- TRANSACTION 2
(8, 8, "PAID", 1, 12000.00, NOW(), NOW()),
(8, 6, "PAID", 5, 11000.00, NOW(), NOW()),
(8, 3, "PAID", 1, 100000.00, NOW(), NOW()),
-- TRANSACTION 3
(9, 1, "PAID", 3, 10000.00, NOW(), NOW()),
(9, 4, "PAID", 2, 50000.00, NOW(), NOW()),
(9, 2, "PAID", 1, 10000.00, NOW(), NOW()),

-- USER 4
-- TRANSACTION 1
(10, 8, "PAID", 3, 12000.00, NOW(), NOW()),
(10, 1, "PAID", 2, 10000.00, NOW(), NOW()),
(10, 3, "PAID", 1, 100000.00, NOW(), NOW()),
-- TRANSACTION 2
(11, 4, "PAID", 3, 50000.00, NOW(), NOW()),
(11, 1, "PAID", 2, 10000.00, NOW(), NOW()),
(11, 2, "PAID", 1, 10000.00, NOW(), NOW()),
-- TRANSACTION 3
(12, 6, "PAID", 3, 11000.00, NOW(), NOW()),
(12, 7, "PAID", 2, 11000.00, NOW(), NOW()),
(12, 8, "PAID", 1, 12000.00, NOW(), NOW()),

-- USER 5
-- TRANSACTION 1
(13, 8, "PAID", 10, 12000.00, NOW(), NOW()),
(13, 6, "PAID", 10, 11000.00, NOW(), NOW()),
(13, 2, "PAID", 10, 10000.00, NOW(), NOW()),
-- TRANSACTION 2
(14, 1, "PAID", 3, 10000.00, NOW(), NOW()),
(14, 2, "PAID", 2, 10000.00, NOW(), NOW()),
(14, 6, "PAID", 1, 11000.00, NOW(), NOW()),
-- TRANSACTION 3
(15, 4, "PAID", 3, 50000.00, NOW(), NOW()),
(15, 5, "PAID", 2, 10000.00, NOW(), NOW()),
(15, 3, "PAID", 1, 100000.00, NOW(), NOW());


-- 2-A TAMPILKAN NAMA USER / PELANGGAN DENGAN GENDER LAKI-LAKI / "M"
SELECT NAME FROM USERS WHERE USERS.GENDER = "M";

-- 2-B TAMPILKAN PRODUCT DENGAN ID = 3;
SELECT * FROM PRODUCTS WHERE ID = 3;

-- 2-C TAMPILKAN DATA PELANGGAN YANG CREATED_AT DALAM RANGE 7 HARI KEBELAKANG DAN NAMANYA MENGANDUNG KATA 'A'
SELECT * FROM USERS
WHERE NAME LIKE '%A%' OR '%a%'
HAVING WEEK(CREATED_AT) = WEEK(NOW());

-- 2-D TAMPILKAN JUMLAH USER YANG GENDERNYA PEREMPUAN
SELECT COUNT(gender) AS jumlah_user_perempuan FROM USERS 
WHERE GENDER = "F";

-- 2-E TAMPILKAN DATA PELANGGAN DEGAN URUTAN SESUAI NAMA ABJAD
SELECT * FROM USERS GROUP BY NAME ASC;

-- 3-A UBAH DATA PRODUCTS.ID = 1 DENGAN NAMA "PRODUCT DUMMY"
UPDATE PRODUCTS SET NAME = "PRODUCT DUMMY" WHERE ID = 1;

-- 3-B UPDATE QTY = 3 PADA TRANSACTION DETAIL DENGAN PRODUCT_ID = 1
UPDATE TRANSACTION_DETAILS SET QTY = 3 WHERE PRODUCT_ID = 1;

-- 4-A DELETE DATA PADA TABEL PRODUCTS DENGAN ID = 1
DELETE FROM PRODUCTS WHERE ID = 1;

-- 4-B DELETE PADA TABEL PRODUCT DENGAN PRODUCT_TYPE_ID = 1
DELETE FROM PRODUCTS WHERE PRODUCT_TYPE_ID = 1;











-- JOIN, UNION, SUB-QUERY, FUNCTION

-- 1 GABUNGKAN DATA TRANSAKSI DARI USER_ID = 1 AND USER_ID = 2;
SELECT * FROM TRANSACTIONS WHERE USER_ID = 1  OR USER_ID = 2;

-- 2 TAMPILKAN JUMLAH HARGA TRANSAKSI USER_ID = 1
SELECT  USER_ID, SUM(TOTAL_PRICE) AS TOTAL_PENGELUARAN FROM TRANSACTIONS WHERE USER_ID = 1;

-- 3 TAMPILKAN TOTAL TRANSAKSI DENGAN PRODUCT_TYPE_ID = 2
SELECT PRODUCT_TYPES.ID, PRODUCT_TYPES.NAME, COUNT(TRANSACTION_DETAILS.TRANSACTION_ID) AS JUMLAH_TRANSAKSI 
FROM TRANSACTION_DETAILS
JOIN PRODUCTS ON TRANSACTION_DETAILS.PRODUCT_ID = PRODUCTS.ID
JOIN PRODUCT_TYPES ON PRODUCT_TYPE_ID = PRODUCT_TYPES.ID;

-- 4 TAMPILKAN SEMUA FIELD TABLE PRODUCTS DAN FIELD NAME TABLE PRODUCT_TYPES YANG SALING BERHUBUNGAN
SELECT *, PRODUCT_TYPES.NAME AS TIPE_PRODUK FROM PRODUCTS
INNER JOIN PRODUCT_TYPES ON PRODUCTS.PRODUCT_TYPE_ID = PRODUCT_TYPES.ID;

-- 5 TAMPILKAN SEMUA FIELD TABLE TRANSACTION, PRODUCTS.NAME, DAN USERS.NAME
SELECT T.*, P.NAME AS NAMA_PRODUCT, U.NAME AS NAME_USER FROM TRANSACTIONS T
INNER JOIN TRANSACTION_DETAILS TD ON TD.TRANSACTION_ID = T.ID
INNER JOIN PRODUCTS P ON P.ID = TD.PRODUCT_ID
INNER JOIN PRODUCT_TYPES PT ON P.PRODUCT_TYPE_ID = PT.ID
INNER JOIN USERS U ON T.USER_ID = U.ID; 

-- 6 BUAT FUNCTION SETELAH DATA TRANSAKSI DIHAPUS MAKA TRANSACTION_DETAILS TERHAPUS JUGA DENGAN TRANSACTION ID YANG DIMAKSUD
DELIMITER //
CREATE TRIGGER TRIGGER_AUTODEL_TRANSACTION_DETAILS
BEFORE DELETE ON TRANSACTIONS FOR EACH ROW
BEGIN
DELETE FROM TRANSACTION_DETAILS WHERE OLD.ID = TRANSACTION_DETAILS.TRANSACTION_ID;
END; //
DELIMITER ;

-- 7 BUAT FUNCTION SETELAH DATA TRANSAKSI_DETAILS DIHAPUS MAKA TOTAL QTY TERUPDATE BERDASARKAN DATA TRANSACTION_ID YANG DIHAPUS
DELIMITER //
CREATE TRIGGER RESTOCK_AFTER_A_TRANSACTION_DETAIL_CANCELLED
AFTER DELETE ON TRANSACTION_DETAILS FOR EACH ROW
BEGIN
UPDATE TRANSACTIONS SET TRANSACTIONS.TOTAL_QTY = TRANSACTIONS.TOTAL_QTY - OLD.QTY;
UPDATE TRANSACTIONS SET TRANSACTIONS.TOTAL_PRICE = TRANSACTIONS.TOTAL_PRICE - OLD.PRICE;

END //
DELIMITER ;

-- 8 TAMPILKAN DATA PRODUCTS YANG TIDAK ADA DI TRANSACTION_DETAILS
SELECT * FROM PRODUCTS WHERE ID NOT IN (SELECT TRANSACTION_DETAILS.PRODUCT_ID FROM TRANSACTION_DETAILS);